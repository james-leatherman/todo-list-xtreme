services:
  api:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./uploads:/app/uploads
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=todolist
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/todolist
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - CORS_ORIGINS=http://localhost:3000
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - FRONTEND_URL=${FRONTEND_URL}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_RESOURCE_ATTRIBUTES=service.name=todo-list-xtreme-api
    depends_on:
      - db
      - otel-collector
    command: uvicorn src.todo_api.main:app --host 0.0.0.0 --port 8000 --reload

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=todolist
      # Enhanced PostgreSQL logging configuration
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    command: 
      - postgres
      - -c
      - log_destination=stderr
      - -c
      - log_statement=all
      - -c
      - log_connections=on
      - -c
      - log_disconnections=on
      - -c
      - log_checkpoints=on
      - -c
      - log_lock_waits=on
      - -c
      - log_temp_files=0
      - -c
      - log_autovacuum_min_duration=0
      - -c
      - log_error_verbosity=verbose
      - -c
      - log_hostname=on
      - -c
      - "log_line_prefix=%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h " 
      - -c
      - log_min_duration_statement=100
      - -c
      - log_timezone=UTC
    ports:
      - "5432:5432"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-exploretraces-app/grafana-exploretraces-app-latest.zip;grafana-traces-app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889:8889"
      - "8888:8888"
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]
    depends_on:
      - tempo
      
  pushgateway:
    image: prom/pushgateway:latest
    ports:
      - "9091:9091"

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./tempo.yml:/etc/tempo.yml
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"   # Tempo HTTP
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yml
      - loki_data:/var/lib/loki
    command: -config.file=/etc/loki/loki-config.yml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki
    restart: unless-stopped

  k6:
    image: grafana/k6:latest
    volumes:
      - ../scripts:/scripts
      - ./k6-results:/results
    environment:
      - K6_OUT=json=/results/k6-results.json
      - API_URL=http://api:8000
      - AUTH_TOKEN=${AUTH_TOKEN:-}
    depends_on:
      - api

volumes:
  postgres_data:
  grafana_data:
  tempo_data:
  loki_data:
