server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker containers logs
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: (?P<container_name>(?:[^|]*/){2}(?P<container_name_only>[^-]*))
          source: tag
      - timestamp:
          format: RFC3339Nano
          source: time
      - labels:
          stream:
          container_name:
          container_name_only:
      - output:
          source: output

  # Application specific logs for todo-list-xtreme API
  - job_name: todo-api
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'job'
        regex: 'api'
        replacement: 'todo-api'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'project'
      - source_labels: ['__meta_docker_container_name']
        target_label: 'container_name'
        regex: '/(.+)'
        replacement: '${1}'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'stream'
      # Only include containers from the API service
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        regex: 'api'
        action: keep
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          format: RFC3339Nano
          source: time
      - output:
          source: log

  # Enhanced PostgreSQL logs
  - job_name: postgres
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'job'
        regex: 'db'
        replacement: 'postgres'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'
      - source_labels: ['__meta_docker_container_name']
        target_label: 'container_name'
        regex: '/(.+)'
        replacement: '${1}'
      # Only include containers from the db service  
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        regex: 'db'
        action: keep
    pipeline_stages:
      # Parse PostgreSQL log format: timestamp [pid]: [line] user=user,db=db,app=app,client=client message
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) (?P<timezone>\w+) \[(?P<pid>\d+)\]: \[(?P<line_num>\d+-\d+)\] (?:user=(?P<user>[^,]*),db=(?P<database>[^,]*),app=(?P<application>[^,]*),client=(?P<client>[^ ]*) )?(?P<level>\w+)?:?\s*(?P<message>.*)'
      - timestamp:
          format: '2006-01-02 15:04:05.000'
          source: timestamp
      - labels:
          level:
          pid:
          user:
          database:
          application:
          client:
      # Add severity detection for PostgreSQL messages
      - match:
          selector: '{job="postgres"}'
          stages:
            - regex:
                expression: '^(?P<severity>ERROR|FATAL|PANIC|WARNING|NOTICE|INFO|LOG|DEBUG\d?):'
                source: message
            - labels:
                severity:
      - output:
          source: message
