name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Start backend and DB
      working-directory: ./backend
      env:
        SECRET_KEY: ${{ secrets.JWT_SECRET_KEY || 'test-secret-key-for-ci-only-do-not-use-in-production' }}
      run: |
        docker-compose up -d db
        docker-compose up -d api
        sleep 10

    - name: Generate test JWT token
      working-directory: ./backend
      env:
        SECRET_KEY: ${{ secrets.JWT_SECRET_KEY || 'test-secret-key-for-ci-only-do-not-use-in-production' }}
      run: |
        # Install PyJWT for token generation
        pip install PyJWT
        
        # Create token generation script
        cat > generate_token.py << 'EOF'
        import jwt
        from datetime import datetime, timedelta
        import os
        import sys

        # JWT configuration - use environment variable with fallback
        secret_key = os.environ.get('SECRET_KEY')
        if not secret_key:
            # Fallback for CI environments where secret might not be set
            print('WARNING: SECRET_KEY not found, using default for testing', file=sys.stderr)
            secret_key = 'test-secret-key-for-ci-only-do-not-use-in-production'

        algorithm = 'HS256'

        # Create token payload
        now = datetime.utcnow()
        payload = {
            'sub': 'test@example.com',
            'iat': now,
            'exp': now + timedelta(hours=24),
            'user_id': 1
        }

        # Generate token
        token = jwt.encode(payload, secret_key, algorithm=algorithm)
        if isinstance(token, bytes):
            token = token.decode('utf-8')
            
        print(token)
        EOF
        
        # Generate the token
        TEST_TOKEN=$(python3 generate_token.py)
        echo "TEST_AUTH_TOKEN=$TEST_TOKEN" >> $GITHUB_ENV      - name: Wait for Backend
        run: |
          attempt=1
          max_attempts=10
          while [ $attempt -le $max_attempts ]; do
            if curl -s http://localhost:8000/health; then
              echo "Backend is healthy!"
              break
            fi
            echo "Attempt $attempt failed, waiting..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
          # Final check to make sure the API endpoints are working
          if curl -s http://localhost:8000/api/v1/column-settings/ -H "Authorization: Bearer $TEST_AUTH_TOKEN" > /dev/null; then
            echo "API endpoints are accessible!"
          else
            echo "Warning: API endpoints may not be fully ready"
          fi
      
    - name: Run backend tests
      working-directory: ./backend
      env:
        POSTGRES_USER: ${{ secrets.DB_USER || 'postgres' }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD || 'postgres' }}
        POSTGRES_SERVER: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: todolist
        DATABASE_URL: postgresql://${{ secrets.DB_USER || 'postgres' }}:${{ secrets.DB_PASSWORD || 'postgres' }}@localhost:5432/todolist
        SECRET_KEY: ${{ secrets.JWT_SECRET_KEY || 'test-secret-key-for-ci-only-do-not-use-in-production' }}
        CORS_ORIGINS: "http://localhost:3000"
        TEST_AUTH_TOKEN: ${{ env.TEST_AUTH_TOKEN }}
      run: pytest

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install
        
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false
